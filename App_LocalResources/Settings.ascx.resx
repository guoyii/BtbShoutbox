<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblTemplate.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="lblTemplate.Help" xml:space="preserve">
    <value>Allows you to provide a custom template for displaying the items. Use parameters for dynamic substitution ( ie. [USERNAME] [CREATEDDATE] [SHOUTAGE] [MESSAGE] [GRAVATAR] )</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>BtbShoutbox Settings</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>About BtbShoutbox Settings</value>
  </data>
  <data name="lblFilterProfanity.Help" xml:space="preserve">
    <value>Filters the chat messages to remove profanity from the content</value>
  </data>
  <data name="lblFilterProfanity.Text" xml:space="preserve">
    <value>Filter Profanity</value>
  </data>
  <data name="lblItemLimit.Help" xml:space="preserve">
    <value>Defines the latest number of messages to display in the shoutbox</value>
  </data>
  <data name="lblItemLimit.Text" xml:space="preserve">
    <value>Item Limit</value>
  </data>
  <data name="lblAutoRefresh.Help" xml:space="preserve">
    <value>If checked the UI will automatically check for new shout messages and update without requiring the user to click refresh link.</value>
  </data>
  <data name="lblAutoRefresh.Text" xml:space="preserve">
    <value>Auto Refresh</value>
  </data>
  <data name="lblOnlyRegistered.Help" xml:space="preserve">
    <value>If checked only registered users of the portal can shout messages.</value>
  </data>
  <data name="lblOnlyRegistered.Text" xml:space="preserve">
    <value>Registered Users Only</value>
  </data>
  <data name="DefaultTemplate.Text" xml:space="preserve">
    <value>&lt;div&gt;&lt;span class="shoutUsername"&gt;[GRAVATAR][USERNAME]&lt;/span&gt; &lt;span class="shoutAge"&gt;said ([SHOUTAGE])&lt;/span&gt;&lt;span&gt;[VOTES]&lt;/span&gt;&lt;/div&gt;&lt;div class="shoutMessage"&gt;[MESSAGE]&lt;/div&gt;</value>
  </data>
  <data name="lblEmailAdmin.Help" xml:space="preserve">
    <value>Email address to send the shout to when someone posts. This can be used to monitor the shout posts. Leave blank to not send an email.</value>
  </data>
  <data name="lblEmailAdmin.Text" xml:space="preserve">
    <value>Admin Email Address</value>
  </data>
  <data name="lblCharacterLimit.Help" xml:space="preserve">
    <value>Defines the maximum number of characters that a shout post can contain, anything over this value is truncated to the nearest whole word. Setting this value to 0 will make the shout posts unlimited in size.</value>
  </data>
  <data name="lblCharacterLimit.Text" xml:space="preserve">
    <value>Shout Length Limit</value>
  </data>
  <data name="lblTopOfModule.Help" xml:space="preserve">
    <value>When checked the message entry control is displayed at the top of module. Otherwise its displayed at the bottom.</value>
  </data>
  <data name="lblTopOfModule.Text" xml:space="preserve">
    <value>Message Input at Top</value>
  </data>
  <data name="lblUserCaption.Help" xml:space="preserve">
    <value>Defines the name which is shown for authenticated user shouts</value>
  </data>
  <data name="lblUserCaption.Text" xml:space="preserve">
    <value>User Caption</value>
  </data>
  <data name="rbDisplayName.Text" xml:space="preserve">
    <value>Display Name</value>
  </data>
  <data name="rbUsername.Text" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="lblDisplayOlderLink.Help" xml:space="preserve">
    <value>When check a link will be shown to allow the user to load older shout posts</value>
  </data>
  <data name="lblDisplayOlderLink.Text" xml:space="preserve">
    <value>Display Older Link</value>
  </data>
  <data name="lblPurgeAgeLimit.Help" xml:space="preserve">
    <value>When this is set to a positive number any posts older than this value will be deleted from the database. Set this to 365 to delete posts made a year ago for example.</value>
  </data>
  <data name="lblPurgeAgeLimit.Text" xml:space="preserve">
    <value>Purge Old Posts (days)</value>
  </data>
  <data name="lblFloodControlEnabled.Help" xml:space="preserve">
    <value>Stop users from voting on the same item multiple times</value>
  </data>
  <data name="lblFloodControlEnabled.Text" xml:space="preserve">
    <value>Enable Voting Flood Control</value>
  </data>
  <data name="lnkReloadDefault.Text" xml:space="preserve">
    <value>Reload Default Template</value>
  </data>
</root>